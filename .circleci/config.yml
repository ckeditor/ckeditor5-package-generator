version: 2.1

orbs:
  browser-tools: circleci/browser-tools@2.1.2

parameters:
  triggerCommitHash:
    type: string
    default: ""
  isNightly:
    type: boolean
    default: false
  isRelease:
    type: boolean
    default: false

commands:
  bootstrap_repository_command:
    description: "Bootstrap the repository"
    steps:
      - run:
          name: Install pnpm
          command: |
            npm install -g pnpm@10 --prefix .pnpm
            echo 'export PATH="$PWD/.pnpm/bin:$PATH"' >> $BASH_ENV
      - run:
          name: Verify pnpm version
          command: pnpm --version
      - install_ssh_keys_command
      - run:
          name: Install dependencies
          command: pnpm install
      - prepare_environment_variables_commands

  install_ssh_keys_command:
    description: "Install SSH keys"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "a0:41:a2:56:c8:7d:3f:29:41:d1:87:92:fd:50:2b:6b"

  npm_login_command:
    description: "Enable interacting with `npm` using an auth token"
    steps:
      - run:
          name: Login to the npm registry using '.npmrc' file
          command: echo "//registry.npmjs.org/:_authToken=\${CKE5_NPM_TOKEN}" > ~/.npmrc

  gpg_credentials_command:
    description: "Setup GPG configuration"
    steps:
      - run:
          name: Setup GPG configuration
          command: |
            #!/bin/bash

            echo "$CKE5_GPG_KEY" | base64 --decode | gpg --import --quiet

  git_credentials_command:
    description: "Setup git configuration"
    steps:
      - gpg_credentials_command
      - run:
          name: Setup git configuration
          command: |
            git config --global user.email "ckeditor-bot@cksource.com"
            git config --global user.name "CKEditorBot"
            git config --global user.signingkey 3F615B600F38B27B
            git config --global commit.gpgsign true
            git config --global tag.gpgSign true

  prepare_environment_variables_commands:
    description: "Prepare non-secret environment variables"
    steps:
      - run:
          name: Prepare environment variables
          command: |
            #!/bin/bash

            # Non-secret environment variables needed for the pipeline scripts.
            CKE5_GITHUB_ORGANIZATION="ckeditor"
            CKE5_GITHUB_REPOSITORY="ckeditor5-package-generator"
            CKE5_CIRCLE_APPROVAL_JOB_NAME="release_approval"
            CKE5_GITHUB_RELEASE_BRANCH="master"

            echo export CKE5_CIRCLE_APPROVAL_JOB_NAME=$CKE5_CIRCLE_APPROVAL_JOB_NAME >> $BASH_ENV
            echo export CKE5_GITHUB_RELEASE_BRANCH=$CKE5_GITHUB_RELEASE_BRANCH >> $BASH_ENV
            echo export CKE5_GITHUB_ORGANIZATION=$CKE5_GITHUB_ORGANIZATION >> $BASH_ENV
            echo export CKE5_GITHUB_REPOSITORY=$CKE5_GITHUB_REPOSITORY >> $BASH_ENV
            echo export CKE5_GITHUB_REPOSITORY_SLUG="$CKE5_GITHUB_ORGANIZATION/$CKE5_GITHUB_REPOSITORY" >> $BASH_ENV
            echo export CKE5_COMMIT_SHA1=$CIRCLE_SHA1 >> $BASH_ENV

jobs:
  notify_ci_failure:
    docker:
      - image: cimg/node:22.12.0
    parameters:
      hideAuthor:
        type: string
        default: "false"
    steps:
      - checkout
      - bootstrap_repository_command
      - run:
          # In the PRs that comes from forked repositories, we do not share secret variables.
          # Hence, some of the scripts will not be executed.
          name: ðŸ‘¤ Verify if the build was triggered by community - Check if the build should continue
          command: |
            #!/bin/bash

            if [[ -z ${COVERALLS_REPO_TOKEN} ]];
            then
              circleci-agent step halt
            fi
      - run:
          environment:
            CKE5_SLACK_NOTIFY_HIDE_AUTHOR: << parameters.hideAuthor >>
            CKE5_PIPELINE_NUMBER: << pipeline.number >>
          name: Waiting for other jobs to finish and sending notification on failure
          command: pnpm exec ckeditor5-dev-ci-circle-workflow-notifier
          no_output_timeout: 1h

  validate_and_tests:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Execute ESLint
          command: pnpm run lint
      - run:
          name: Run unit tests
          command: pnpm run coverage
      - unless:
          # Upload the code coverage results for non-nightly builds only.
          condition: << pipeline.parameters.isNightly >>
          steps:
            - run:
                # In the PRs that comes from forked repositories, we do not share secret variables.
                # Hence, some of the scripts will not be executed.
                name: ðŸ‘¤ Verify if the build was triggered by community - Check if the build should continue
                command: |
                  #!/bin/bash

                  if [[ -z ${COVERALLS_REPO_TOKEN} ]];
                  then
                    circleci-agent step halt
                  fi
            - run:
                name: Upload code coverage
                command: cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js

  package_js_npm_both_install_methods:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (JavaScript, npm, current and legacy installation methods)
          command: node scripts/ci/verify-build -l js -p npm -m current-and-legacy -g GLOBAL_NAME

  package_js_yarn_both_install_methods:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (JavaScript, yarn, current and legacy installation methods)
          command: node scripts/ci/verify-build -l js -p yarn -m current-and-legacy -g GLOBAL_NAME

  package_js_pnpm_both_install_methods:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (JavaScript, pnpm, current and legacy installation methods)
          command: node scripts/ci/verify-build -l js -p pnpm -m current-and-legacy -g GLOBAL_NAME

  package_js_npm_current_install_methods:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (JavaScript, npm, current installation methods)
          command: node scripts/ci/verify-build -l js -p npm -m current -g GLOBAL_NAME

  package_js_yarn_current_install_methods:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (JavaScript, yarn, current installation methods)
          command: node scripts/ci/verify-build -l js -p yarn -m current -g GLOBAL_NAME

  package_js_pnpm_current_install_methods:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (JavaScript, pnpm, current installation methods)
          command: node scripts/ci/verify-build -l js -p pnpm -m current -g GLOBAL_NAME

  package_ts_npm_both_install_methods_custom_name:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (TypeScript, npm, current and legacy installation methods, custom plugin name)
          command: node scripts/ci/verify-build -l ts -p npm -m current-and-legacy -n CustomPluginName -g GLOBAL_NAME

  package_ts_npm_current_install_methods_custom_name:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (TypeScript, npm, current installation methods, custom plugin name)
          command: node scripts/ci/verify-build -l ts -p npm -m current -n CustomPluginName -g GLOBAL_NAME

  package_ts_pnpm_both_install_methods_custom_name:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (TypeScript, pnpm, current and legacy installation methods, custom plugin name)
          command: node scripts/ci/verify-build -l ts -p pnpm -m current-and-legacy -n CustomPluginName -g GLOBAL_NAME

  package_ts_pnpm_current_install_methods_custom_name:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (TypeScript, pnpm, current installation methods, custom plugin name)
          command: node scripts/ci/verify-build -l ts -p pnpm -m current -n CustomPluginName -g GLOBAL_NAME

  package_js_yarn_both_install_methods_custom_name:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (JavaScript, yarn, current and legacy installation methods, custom plugin name)
          command: node scripts/ci/verify-build -l js -p yarn -m current-and-legacy -n customPluginName400 -g GLOBAL_NAME

  package_js_yarn_current_install_methods_custom_name:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (JavaScript, yarn, current installation methods, custom plugin name)
          command: node scripts/ci/verify-build -l js -p yarn -m current -n customPluginName400 -g GLOBAL_NAME

  package_ts_yarn_both_install_methods:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (TypeScript, yarn, current and legacy installation methods)
          command: node scripts/ci/verify-build -l ts -p yarn -m current-and-legacy -g GLOBAL_NAME

  package_ts_yarn_current_install_methods:
    docker:
      - image: cimg/node:22.12.0-browsers
    steps:
      - checkout
      - bootstrap_repository_command
      - browser-tools/install_chrome
      - run:
          name: Verify build (TypeScript, yarn, current installation methods)
          command: node scripts/ci/verify-build -l ts -p yarn -m current -g GLOBAL_NAME

  release_prepare:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - bootstrap_repository_command
      - run:
          name: Check if packages are ready to be released
          command: npm run release:prepare-packages -- --verbose --compile-only

  trigger_release_process:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - bootstrap_repository_command
      - run:
          name: Verify if the project is ready to release
          command: |
            #!/bin/bash

            # Do not fail if the Node script ends with non-zero exit code.
            set +e

            node scripts/ci/is-project-ready-to-release.js
            EXIT_CODE=$( echo $? )

            if [ ${EXIT_CODE} -eq 1 ];
            then
              circleci-agent step halt
            fi
      - run:
          name: Trigger the release pipeline
          command: pnpm exec ckeditor5-dev-ci-trigger-circle-build

  release_project:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - bootstrap_repository_command
      - run:
          name: Verify the trigger commit from the repository
          command: |
            #!/bin/bash

            CKE5_LATEST_COMMIT_HASH=$( git log -n 1 --pretty=format:%H origin/master )
            CKE5_TRIGGER_COMMIT_HASH=<< pipeline.parameters.triggerCommitHash >>

            if [[ "${CKE5_LATEST_COMMIT_HASH}" != "${CKE5_TRIGGER_COMMIT_HASH}" ]]; then
              echo "There is a newer commit in the repository on the \`#master\` branch. Use its build to start the release."
              circleci-agent step halt
            fi
      - npm_login_command
      - git_credentials_command
      - run:
          name: Verify if a releaser triggered the job
          command: |
            #!/bin/bash

            # Do not fail if the Node script ends with non-zero exit code.
            set +e

            pnpm exec ckeditor5-dev-ci-is-job-triggered-by-member
            EXIT_CODE=$( echo $? )

            if [ ${EXIT_CODE} -ne 0 ];
            then
              echo "Aborting the release due to failed verification of the approver (no rights to release)."
              circleci-agent step halt
            fi
      - run:
          name: Disable the redundant workflows option
          command: pnpm exec ckeditor5-dev-ci-circle-disable-auto-cancel-builds
      - run:
          name: Prepare the new version to release
          command: npm run release:prepare-packages -- --verbose
      - run:
          name: Publish the packages
          command: npm run release:publish-packages -- --verbose
      - run:
          name: Enable the redundant workflows option
          command: pnpm exec ckeditor5-dev-ci-circle-enable-auto-cancel-builds
          when: always
      - run:
          name: Pack the "release/" directory (in case of failure)
          command: |
            zip -r ./release.zip ./release
          when: always
      - store_artifacts:
          path: ./release.zip
          when: always

workflows:
  version: 2
  main:
    when:
      and:
        - equal: [ false, << pipeline.parameters.isNightly >> ]
        - equal: [ false, << pipeline.parameters.isRelease >> ]
    jobs:
      - validate_and_tests
      - package_js_npm_both_install_methods
      - package_js_yarn_both_install_methods
      - package_js_pnpm_both_install_methods
      - package_js_npm_current_install_methods
      - package_js_yarn_current_install_methods
      - package_js_pnpm_current_install_methods
      - package_ts_npm_both_install_methods_custom_name
      - package_ts_npm_current_install_methods_custom_name
      - package_js_yarn_both_install_methods_custom_name
      - package_js_yarn_current_install_methods_custom_name
      - package_ts_yarn_both_install_methods
      - package_ts_pnpm_both_install_methods_custom_name
      - package_ts_pnpm_current_install_methods_custom_name
      - release_prepare
      - trigger_release_process:
          requires:
            - validate_and_tests
            - release_prepare
            - package_js_npm_both_install_methods
            - package_js_yarn_both_install_methods
            - package_js_pnpm_both_install_methods
            - package_js_npm_current_install_methods
            - package_js_yarn_current_install_methods
            - package_js_pnpm_current_install_methods
            - package_ts_npm_both_install_methods_custom_name
            - package_ts_npm_current_install_methods_custom_name
            - package_js_yarn_both_install_methods_custom_name
            - package_js_yarn_current_install_methods_custom_name
            - package_ts_yarn_both_install_methods
            - package_ts_pnpm_both_install_methods_custom_name
            - package_ts_pnpm_current_install_methods_custom_name
          filters:
            branches:
              only:
                - master
      - notify_ci_failure:
          filters:
            branches:
              only:
                - master

  release:
    when:
      and:
        - equal: [ false, << pipeline.parameters.isNightly >> ]
        - equal: [ true, << pipeline.parameters.isRelease >> ]
    jobs:
      - release_approval:
          type: approval
      - release_project:
          requires:
            - release_approval

  nightly:
    when:
      and:
        - equal: [ true, << pipeline.parameters.isNightly >> ]
        - equal: [ false, << pipeline.parameters.isRelease >> ]
    jobs:
      - validate_and_tests
      - package_js_npm_both_install_methods
      - package_js_yarn_both_install_methods
      - package_js_pnpm_both_install_methods
      - package_js_npm_current_install_methods
      - package_js_yarn_current_install_methods
      - package_js_pnpm_current_install_methods
      - package_ts_npm_both_install_methods_custom_name
      - package_ts_npm_current_install_methods_custom_name
      - package_js_yarn_both_install_methods_custom_name
      - package_js_yarn_current_install_methods_custom_name
      - package_ts_pnpm_both_install_methods_custom_name
      - package_ts_pnpm_current_install_methods_custom_name
      - package_ts_yarn_both_install_methods
      - notify_ci_failure:
          hideAuthor: "true"
          filters:
            branches:
              only:
                - master
